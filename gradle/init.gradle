/**
 * A Gradle plugin to generate a JSON file with build information.
 *
 * Reference:
 * - https://github.com/nwillc/buildInfo/blob/master/src/main/groovy/com/github/nwillc/buildInfo/BuildInfoPlugin.groovy
 */

import groovy.json.JsonOutput
import java.nio.file.Paths
import org.gradle.api.Plugin
import org.gradle.api.Project

class GradleMetadataAction implements Plugin<Project> {
    private static final String[] SYSTEM_PROPERTIES = [
        "java.vendor",
        "java.version",
    ]

    static class Output {
        String tmp = File.createTempDir()
        String file = Paths.get(tmp, "gradle-metadata-action.json").toString()

        void write(String payload) {
            new File(file).write payload
        }
    }

    static class GitHubAction {
        void setEnv(String key, String value) {
            new File(System.getenv("GITHUB_ENV")).append "${key}=\"${value}\"\n"
        }
        void setOutput(String key, String value) {
            new File(System.getenv("GITHUB_OUTPUT")).append "${key}=${value}\n"
        }
    }

    @Override
    void apply(Project project) {
        project.extensions.create("GitHubActionExtension", GradleMetadataAction.GitHubAction)
        project.extensions.create("GradleMetadataActionOutput", GradleMetadataAction.Output)

        project.task('gradle-metadata-action') {
            doLast {
                def projectVersion = project.version == "unspecified" ? "" : project.version
                def buildArtifactID = "${project.name}"
                if (projectVersion != "") {
                    buildArtifactID += "-${projectVersion}"
                }

                def dockerBakeFile = [
                    "target": [
                        "gradle-metadata-action": [
                            "args": [
                                "GRADLE_VERSION":               project.gradle.gradleVersion,
                                "GRADLE_PROJECT_NAME":          project.name,
                                "GRADLE_PROJECT_DESCRIPTION":   project.description ? project.description : "",
                                "GRADLE_PROJECT_GROUP":         project.group,
                                "GRADLE_PROJECT_VERSION":       projectVersion,
                                "GRADLE_PROJECT_PROFILE":       project.hasProperty('profile') ? project.profile : "",
                                "GRADLE_BUILD_ARTIFACT_ID":     "${buildArtifactID}",
                                "GRADLE_BUILD_ARTIFACT":        "${buildArtifactID}.jar",
                                "GRADLE_SOURCE_COMPATIBILITY":  project.hasProperty('sourceCompatibility') ? project.sourceCompatibility.toString() : "",
                                "GRADLE_TARGET_COMPATIBILITY":  project.hasProperty('targetCompatibility') ? project.targetCompatibility.toString() : "",
                            ]
                        ]
                    ]
                ]

                SYSTEM_PROPERTIES.each {
                    def key = it.replace('.', '_').toUpperCase()
                    dockerBakeFile["target"]["gradle-metadata-action"]["args"][key] = System.getProperty(it)
                }

                // Loop through the arguments and set the environment for the GitHub Actions
                dockerBakeFile["target"]["gradle-metadata-action"]["args"].each { key, value ->
                    project.GitHubActionExtension.setEnv(key, value)
                }

                project.GradleMetadataActionOutput.write JsonOutput.prettyPrint(JsonOutput.toJson(dockerBakeFile))

                // Set the environment for the GitHub Actions
                project.GitHubActionExtension.setEnv("GRADLE_METADATA_ACTION", "true")
                project.GitHubActionExtension.setEnv("GRADLE_METADATA_OUTPUT_BAKE_FILE", project.GradleMetadataActionOutput.file)

                // Set the output for the GitHub Actions
                project.GitHubActionExtension.setOutput("bake-file", project.GradleMetadataActionOutput.file)
            }
        }
    }
}

class GradleMetadataActionPlugin implements Plugin<Gradle> {
    void apply(Gradle gradle) {
        gradle.rootProject { project -> 
            project.apply plugin: GradleMetadataAction
        }
    }
}

apply plugin: GradleMetadataActionPlugin
